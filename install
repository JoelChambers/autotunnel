#!/usr/bin/env python


import glob
import os
import pwd
import platform
from   pprint import pprint
import re
import readline
import subprocess
import sys


def main():
  version_check()

  print '''
AUTOTUNNEL INSTALLER
===
Installs script and plist and network location to automatically
use a SSH-based SOCKS Proxy
  ''' 
  network_location()

  ssh_keycheck()

  install_autotunnel_autossh()

  install_autotunnel()

  print
  print 'If you didn\'t see any errors, this should be working?'
  print 'Try to switch to your SOCKS network location and see if you can browse/connect.'
  print






def version_check():
  if not platform.system() == 'Darwin':
    print 'This script is only for OS X!'
    sys.exit()
  if not (sys.version_info[0] == 2 and sys.version_info[1] >= 7):
    print 'This script requires Python 2.7 to run!'
    sys.exit()


def network_location():
  print 'You should make sure you have a network location w/ SOCKS enabled.'
  print 'To create a new location, you can go to System Preferences -> Network Preferences'
  print 'and click on Edit Locations in the Locations pull-down at top.'
  print 'Switch to the new location and click on Wi-Fi -> Advanced...'
  print 'Go to the Proxies tab and check SOCKS Proxy and set SOCKS Proxy Server'
  print 'to "localhost" and "1080"'
  print
  raw_input('[Press ENTER to continue]')
  print

  # TODO: allow creation of proxy
  '''
  # non-default locations
  'networksetup -listlocations | grep -v Automatic'
  # create location
  'sudo networksetup -createlocation SOCKS populate'
  'sudo networksetup -switchtolocation SOCKS'
  'sudo networksetup -setsecurewebproxy 'Wi-Fi' localhost 1080
  'sudo networksetup -setsecurewebproxystate 'Wi-Fi' on'

  Stored in NetworkServices
  /Library/Preferences/SystemConfiguration/preferences.plist
  '''


def ssh_keycheck():
  print 
  print 'Automatic tunnels require passphrase-less SSH keys to work.'
  print 'Doing a simple (not-foolproof) check...'
  if not glob.glob('%s/.ssh/*.pub' % os.path.expanduser('~')):
    create_ssh = raw_input('We couldn\'t find an SSH keyfile, should we make one? (y/n) ').strip()
    if create_ssh and create_ssh[0].lower() == 'y':
      subprocess.call('ssh-keygen')
  else:
    print 'OK, found a key'
  print


def install_autotunnel_autossh():
  plist = open('local.autotunnel.autossh.plist').read()
  server_username = raw_input('What is your server username? ').strip()
  server_hostname = raw_input('What is your server hostname? ').strip()
  server = server_username + '@' + server_hostname
  plist = plist.replace('REPLACE_AUTOSSH_SERVER', server)

  launch_path = '%s/Library/LaunchAgents' % os.path.expanduser('~')
  if not os.path.exists(launch_path):
    os.mkdir(launch_path)
  launch_file = '%s/local.autotunnel.autossh.plist' % launch_path
  print 'Writing plist to %s' % launch_file
  out = open(launch_file, 'w')
  out.write(plist)
  out.close()

  #load the launchagent, enable it, and unload it
  '''launch_autossh = '%s/Library/LaunchAgents/local.autotunnel.autossh.plist' % os.path.expanduser('~')
  subprocess.call(['launchctl', 'load', launch_ssh])
  uid = pwd.getpwuid( os.getuid() ).pw_uid
  enable_autossh = "user/" + str(uid) + "/local.autotunnel.autossh"
  subprocess.call(['launchctl', 'enable', enable_autotunnel])
  subprocess.call(['launchctl', 'unload', launch_autotunnel])'''


def install_autotunnel():
  autotunnel = '%s/autotunnel' % os.path.dirname(os.path.abspath(__file__))
  print 'By default we will use autotunnel in the current location:'
  print '  %s' % autotunnel
  manual_autotunnel = raw_input('If you are manually copying it elsewhere, enter the full path (enter to skip): ').strip()
  if manual_autotunnel:
    autotunnel = manual_autotunnel
  plist = open('local.autotunnel.plist').read()
  plist = plist.replace('REPLACE_AUTOTUNNEL_LOCATION', autotunnel)

  launch_autotunnel = '%s/Library/LaunchAgents/local.autotunnel.plist' % os.path.expanduser('~')
  out = open(launch_autotunnel, 'w')
  out.write(plist)
  out.close()

  print 'Loading autotunnel Agent!'
  subprocess.call(['launchctl', 'load', launch_autotunnel])


if __name__ == '__main__':
  main()
